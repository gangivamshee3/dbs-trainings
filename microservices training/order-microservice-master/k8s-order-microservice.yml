apiVersion: v1
kind: ConfigMap
metadata:
  name: order-microservice-config
data:
  application-dev.yml: |-
    server:
      port: 8222
    spring:
      datasource:
        url: jdbc:h2:mem:orders_db
      jpa:
        show-sql: false
        hibernate:
          ddl-auto: create
        properties:
          hibernate:
            format_sql: true
    debug: false
    logging:
      file:
        name: /var/log/application.log
    info:
      application:
        name: Ekart-app
        description: An ecommerce-store
        company:
          name: Classpath Consulting
          location: Bangalore
    management:
      endpoint:
        info:
          enabled: true
        health:
          show-details: always
          probes:
            enabled: true
        shutdown:
          enabled: true
      endpoints:
        web:
          exposure:
            include: "*"
          base-path: /actuator
      info:
        env:
          enabled: true
      health:
        livenessstate:
          enabled: true
        readinessstate:
          enabled: true
        circuitbreakers:
          enabled: true
    resilience4j:
      circuitbreaker:
        instances:
          inventoryservice:
            register-health-indicator: true
            ring-buffer-size-in-closed-state: 5
            wait-duration-in-open-state: 30s
            ring-buffer-size-in-half-open-state: 3
            failure-rate-threshold: 50
            record-exceptions:
              - java.io.IOException
              - java.util.concurrent.TimeoutException
              - org.springframework.web.client.ResourceAccessException
      retry:
        instances:
          retryService:
            max-retry-attempts: 4
            wait-duration: 2000
            retry-exceptions:
              - java.io.IOException
              - java.util.concurrent.TimeoutException
              - org.springframework.web.client.ResourceAccessException
              - java.lang.IllegalStateException
  application-prod.yml: |-
    server:
      port: 8444
    spring:
      datasource:
        url: jdbc:h2:mem:orders_db
      jpa:
        hibernate:
          ddl-auto: none
---
apiVersion: v1
kind: Secret
metadata:
  name: db-credentials
type: Opaque
data:
  username: c2E=
  password: d2VsY29tZQ==
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: order-microservice-dep
  labels:
    app: order-microservice
spec:
  replicas: 1
  selector:
    matchLabels:
      app: order-microservice
  template:
    metadata:
      name: order-microservice
      labels:
        app: order-microservice
    spec:
      containers:
        - name: order-microservice
          image: classpathio/order-microservice:latest
          imagePullPolicy: IfNotPresent
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: dev
            - name: SPRING_DATASOURCE_USERNAME
              valueFrom:
                secretKeyRef:
                  key: username
                  name: db-credentials
            - name: SPRING_DATASOURCE_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: password
                  name: db-credentials
          volumeMounts:
            - name: app-config
              mountPath: /app/config
            - name: app-logs
              mountPath: /var/log
          livenessProbe:
           httpGet:
              port: 8222
              path: /actuator/health/liveness
            initialDelaySeconds: 10
            periodSeconds: 10
          readinessProbe:
            httpGet:
              port: 8222
              path: /actuator/health/readiness
            initialDelaySeconds: 10
            periodSeconds: 10
      volumes:
        - name: app-config
          configMap:
            name: order-microservice-config
        - name: app-logs
          emptyDir: {}
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: order-service
spec:
  selector:
    app: order-microservice
  ports:
    - port: 80
      targetPort: 8222
      protocol: TCP
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: application-ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /$2
spec:
  ingressClassName: nginx
  rules:
    - host: pradeep.classpath.io
      http:
        paths:
          - path: /orders(/|$)(.*)
            pathType: Prefix
            backend:
              service:
                name: order-service
                port:
                  number: 80
          - path: /inventory(/|$)(.*)
            pathType: Prefix
            backend:
              service:
                name: inventory-service
                port:
                  number: 80